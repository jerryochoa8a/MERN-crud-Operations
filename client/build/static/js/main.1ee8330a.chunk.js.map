{"version":3,"sources":["logo.svg","components/petForm.js","components/allDaPets.js","views/Main.js","views/Details.js","views/Update.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useState","petName","setPetName","petType","setPetType","desc","setDesc","skill1","setSkill1","skill2","setSkill2","skill3","setSkill3","errors","setErrors","to","onSubmit","e","preventDefault","axios","post","then","res","console","log","navigate","catch","err","errorResponse","response","data","errorArr","Object","keys","key","push","message","map","index","style","color","type","onChange","target","value","props","pets","pet","idx","_id","setPets","loaded","setLoaded","useEffect","get","removeFromDom","petsID","filter","setPet","id","onClick","petID","delete","put","name","App","className","Main","path","Details","Update","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.1ee8330a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react'\r\nimport axios from 'axios';\r\nimport { navigate, Link } from '@reach/router';\r\n\r\n\r\nexport default () => {\r\nconst [petName, setPetName] = useState(\"\"); \r\nconst [petType, setPetType] = useState(\"\");\r\nconst [desc, setDesc] = useState(\"\");\r\n\r\nconst [skill1, setSkill1] = useState(\"\");\r\nconst [skill2, setSkill2] = useState(\"\")\r\nconst [skill3, setSkill3] = useState(\"\");\r\n\r\nconst [errors, setErrors] = useState([]); //errors\r\n\r\n\r\nconst onSubmitHandler = e => {\r\n    e.preventDefault();\r\n    axios.post('http://localhost:8000/api/pet/new', {\r\n        petName,\r\n        petType,\r\n        desc,\r\n        skill1,\r\n        skill2,\r\n        skill3,\r\n    })\r\n        .then(res=>{\r\n            console.log(res); \r\n            navigate('/')\r\n        })\r\n        .catch(err=>{\r\n            const errorResponse = err.response.data.errors; \r\n            const errorArr = []; \r\n            for (const key of Object.keys(errorResponse)) { \r\n                errorArr.push(errorResponse[key].message)\r\n            }\r\n            setErrors(errorArr);\r\n        })   \r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <Link to={'/'}>back to home</Link>\r\n\r\n            <h1>Pet Shelter</h1>\r\n            <h2>Know a pet needing a home?</h2>\r\n\r\n            <form onSubmit={onSubmitHandler}>\r\n            {errors.map((err, index) => {\r\n            return(\r\n                <p style={{color:\"red\"}}  key={index}>{err}</p>\r\n                )\r\n                })} \r\n                <p>\r\n                    <label>Pet Name</label><br/>\r\n                    <input type=\"text\" onChange = {(e)=>setPetName(e.target.value)}/>\r\n                </p>\r\n                <p>\r\n                    <label>Pet Type</label><br/>\r\n                    <input type=\"text\" onChange = {(e)=>setPetType(e.target.value)}/>\r\n                </p>\r\n                <p>\r\n                    <label>Pet Description</label><br/>\r\n                    <input type=\"text\" onChange ={(e)=>setDesc(e.target.value)}/>\r\n                </p>\r\n\r\n                <p>Skills (optional)</p>\r\n\r\n                <p>\r\n                    <label>Skill 1:</label><br/>\r\n                    <input type=\"text\" onChange ={(e)=>setSkill1(e.target.value)}/>\r\n                </p>\r\n                <p>\r\n                    <label>Skill 2:</label><br/>\r\n                    <input type=\"text\" onChange ={(e)=>setSkill2(e.target.value)}/>\r\n                </p>\r\n                <p>\r\n                    <label>Skill 3:</label><br/>\r\n                    <input type=\"text\" onChange ={(e)=>setSkill3(e.target.value)}/>\r\n                </p>\r\n                \r\n\r\n                <input type=\"submit\" value=\"Add Pet\"/>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport axios from 'axios';\r\nimport { Link, navigate } from '@reach/router';\r\n\r\n\r\nexport default props => {\r\n    \r\n    const addPet = (e) =>{\r\n        navigate('/pets/new')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Link to={'/pets/new'}>Add a pet to the shelter</Link>\r\n\r\n            <h1>Pet Shelter</h1>\r\n            <h2>These pets are looking for a good home</h2>\r\n\r\n            <h1>Pet Shelter</h1>\r\n\r\n                        <tr>\r\n                            <th>Name </th>\r\n                            <th>|  Type  |</th>\r\n                            <th>action</th>\r\n                        </tr>\r\n            {props.pets.map((pet, idx)=>{\r\n                return (\r\n                    <table key={idx}>\r\n                        <tr>\r\n                            <td>{pet.petName}</td>\r\n                            <td>|  {pet.petType}  |</td>\r\n                            <td>\r\n                                <Link to={\"/pets/\"+ pet._id}> details </Link> .\r\n                                <Link to={\"/pets/\"+ pet._id +\"/edit\"}>edit</Link>\r\n                            </td>\r\n                        </tr>\r\n                    </table>    \r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios'\r\nimport AllDaPets from '../components/allDaPets';\r\n\r\nexport default () => {\r\n    const [pets, setPets] = useState([]);\r\n    const [loaded, setLoaded] = useState(false);\r\n    useEffect(()=>{\r\n        axios.get('http://localhost:8000/api/pets')\r\n            .then(res=>{\r\n                setPets(res.data);\r\n                setLoaded(true);\r\n            });\r\n    },[])\r\n\r\n    const removeFromDom = petsID => {\r\n        setPets(pets.filter(pets => pets._id != petsID));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n           <hr/>\r\n           {loaded && <AllDaPets pets={pets} removeFromDom={removeFromDom}/>}\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios';\r\nimport { Link, navigate } from '@reach/router';\r\n\r\n\r\n\r\nexport default props => {\r\n    const [pet, setPet] = useState({})\r\n    \r\n    useEffect(() => {\r\n        axios.get(\"http://localhost:8000/api/pet/\" + props.id)\r\n            .then(res => setPet(res.data))\r\n    }, [])\r\n\r\n    \r\n    const deletePet = (petID) => {\r\n        axios.delete('http://localhost:8000/api/pet/' +petID+ '/delete')\r\n        .then(res=>{\r\n            console.log(res); \r\n            navigate('/')\r\n        })\r\n    }\r\n\r\n    return  (\r\n        <div>\r\n            <Link to={\"/\"} >Back to home</Link>\r\n\r\n            <h1>Pet Shelter</h1>\r\n            <h2>Details about: {pet.petName}</h2>\r\n            <button onClick={(e)=>{deletePet(pet._id)}}>Adopt {pet.petName}</button>\r\n\r\n            <p><b>Pet Type:</b> {pet.petType}</p>\r\n            <p><b>Description:</b> {pet.desc}</p>\r\n            <b><p>Skills:</p></b>\r\n            <p>{pet.skill1}</p>\r\n            <p>{pet.skill2}</p>\r\n            <p>{pet.skill3}</p>\r\n\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { navigate, Link } from '@reach/router';\r\nimport axios from 'axios';\r\n\r\n\r\nexport default props => {\r\n    const { id } = props;\r\n    const [petName, setPetName] = useState('');\r\n    const [petType, setPetType] = useState('');\r\n    const [desc, setDesc] = useState('');\r\n\r\n    const [skill1, setSkill1] = useState(\"\")\r\n    const [skill2, setSkill2] = useState(\"\")\r\n    const [skill3, setSkill3] = useState(\"\")\r\n    \r\n    \r\n    useEffect(() => { //gets the pet that we are updating\r\n        axios.get('http://localhost:8000/api/pet/' + id)\r\n            .then(res => {\r\n                setPetName(res.data.petName);\r\n                setPetType(res.data.petType);\r\n                setDesc(res.data.desc);\r\n                setSkill1(res.data.skill1);\r\n                setSkill2(res.data.skill2);\r\n                setSkill3(res.data.skill3);\r\n            })\r\n    }, [])\r\n\r\n\r\n    const updatePet = e => {\r\n        e.preventDefault();\r\n        axios.put('http://localhost:8000/api/pets/' + id +\"/update\", { \r\n            petName,\r\n            petType,\r\n            desc,\r\n            skill1,\r\n            skill2,\r\n            skill3\r\n        })\r\n            .then(res=>{\r\n                console.log(res); \r\n                navigate(\"/\")\r\n            })\r\n        }\r\n        return (\r\n            <div>\r\n            \r\n            <Link to={\"/\"}>back to home</Link>\r\n            \r\n            <h1>Pet Shelter</h1>\r\n            <h2>Edit {petName}</h2>\r\n\r\n            <form onSubmit={updatePet}>\r\n                <p>\r\n                    <label>Pet Name</label><br />\r\n                    <input type=\"text\" \r\n                    name=\"petName\" \r\n                    value={petName} \r\n                    onChange={(e) => { setPetName(e.target.value) }} />\r\n                </p>\r\n                <p>\r\n                    <label>Pet Type</label><br />\r\n                    <input type=\"text\" \r\n                    name=\"petType\"\r\n                    value={petType} \r\n                    onChange={(e) => { setPetType(e.target.value) }} />\r\n                </p>\r\n                <p>\r\n                    <label>Pet Description</label> <br/>\r\n                    <input type=\"text\"\r\n                    name=\"desc\"\r\n                    value={desc}\r\n                    onChange={(e) => { setDesc(e.target.value) }}/>\r\n                </p>\r\n\r\n                <p>Skills (optional)</p>\r\n\r\n                <p>\r\n                    <label>Skill 1:</label><br/>\r\n                    <input type=\"text\"\r\n                    name=\"skill1\"\r\n                    value={skill1} \r\n                    onChange ={(e)=>setSkill1(e.target.value)}/>\r\n                </p>\r\n                <p>\r\n                    <label>Skill 2:</label><br/>\r\n                    <input type=\"text\"\r\n                    name=\"skill2\"\r\n                    value={skill2} \r\n                    onChange ={(e)=>setSkill2(e.target.value)}/>\r\n                </p>\r\n                <p>\r\n                    <label>Skill 3:</label><br/>\r\n                    <input type=\"text\"\r\n                    name=\"skill3\"\r\n                    value={skill3} \r\n                    onChange ={(e)=>setSkill3(e.target.value)}/>\r\n                </p>\r\n\r\n                <input type=\"submit\" value=\"Edit Pet\"/> <br/>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Router } from '@reach/router';\nimport PetForm from './components/petForm';\nimport Main from './views/Main';\nimport Details from './views/Details';\nimport Update from './views/Update';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Main path=\"/\"/>\n        <PetForm path=\"/pets/new\"/>\n        <Details path=\"/pets/:id\"/>\n        <Update path=\"/pets/:id/edit\"/>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}